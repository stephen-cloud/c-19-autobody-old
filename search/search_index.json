{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Here is the full documentation for creating the C-19 Autobody sample application in TBD. Why C-19 Autobody? Well, I was laid off from my company as a result of COVID-19. Sales being down. A lot. So between talking to recruiters and having interviews, I learned lots of things I didn't know and put them together. Here's are the features and technologies we're using to implement them. Feature Technology A type safe(r) programming language TypeScript A User Interface React Material Sign-up, sign-in, forgot password AWS Amplify Authentication A back-end API GraphQL schema definition + AWS Amplify GraphQL API A database AWS Amplify API + AWS DynamoDB Subscribe to data changes; handle off-line edits AWS AppSync The upshot \u00b6 After you follow all the steps, you'll have a React Material web application backed by a GraphQL backend in AWS. The application manages the basics of an Autobody shop ... TDB The application is only a demo: It doesn't actually fix cars.","title":"Home"},{"location":"#the-upshot","text":"After you follow all the steps, you'll have a React Material web application backed by a GraphQL backend in AWS. The application manages the basics of an Autobody shop ... TDB The application is only a demo: It doesn't actually fix cars.","title":"The upshot"},{"location":"amplify/","text":"AWS Amplify is a pretty great. It lets you add lots of production quality features to your web and mobile apps hat you'd just have to do by hand otherwise. It's a managed service and tool chain for mobile and web apps. Get started with the Amplify Docs . To install Amplify, follow these instructions . In a nutshell, here's what's in the Amplify framework. Feature What it does How we use it in C-19 Autobody API Lets you define arbitrary APIs using REST or GraphQL. API endpoints can be backed by AWS Lambdas. GraphQL endpoint are backed by DynamoDB. We use some of the available GraphQL queries and mutations. Auth Uses AWS Cognito to create a full-featured sign-up, sign-on, forgot my password, and so on. We use all the things. We get a full-featured authentication experience out-of-the-box with very little extra effort. DataStore A cross-device data storage synchronization that uses GraphQL. You can also subscribe to changes in data from other users and devices. This works whether you're online or offline: Synchronization uses optimistic locking. As we're storing data through the DataStore API, the data will be stored in DynamoDB. Other devices (even browser tabs) will subscribe and update in realtime. Interactions Amplify lets you integrate with Amazon Alexa for chat bots and similar Predictions Integrates Amazon Machine Learning. PubSub Amplify provides connectivity to message systems. Push Notifications Uses Amazon Pinpoint for segmentation and campaigns Storage Can upload images and other data to S3 from an application Let's install AWS Amplify in your project \u00b6 Inside your React Material project folder, execute amplify init OK. So this is a lot of stuff all of a sudden. Don't panic. Just mostly accept the defaults and add c-19-autobody as the projects name and dev as the environment. Here's what it looks like in my terminal Warning TBD: just create a table of the questions/responses \u00bb amplify init Note: It is recommended to run this command from the root of your app directory ? Enter a name for the project c-19-autobody ? Enter a name for the environment dev ? Choose your default editor: Visual Studio Code ? Choose the type of app that you 're building javascript Please tell us about your project ? What javascript framework are you using react ? Source Directory Path: src ? Distribution Directory Path: build ? Build Command: npm run-script build ? Start Command: npm run-script start Using default provider awscloudformation For more information on AWS Profiles, see: https://docs.aws.amazon.com/cli/latest/userguide/cli-multiple-profiles.html ? Do you want to use an AWS profile? Yes ? Please choose the profile you want to use default Adding backend environment dev to AWS Amplify Console app: d15ddnbwqjrf7u \u2827 Initializing project in the cloud... ... \u2714 Successfully created initial AWS cloud resources for deployments. \u2714 Initialized provider successfully. Initialized your environment successfully. Your project has been successfully initialized and connected to the cloud! Some next steps: \"amplify status\" will show you what you' ve added already and if it ' s locally configured or deployed \"amplify add <category>\" will allow you to add features like user login or a backend API \"amplify push\" will build all your local backend resources and provision it in the cloud \u201camplify console\u201d to open the Amplify Console and view your project status \"amplify publish\" will build all your local backend and frontend resources ( if you have hosting category added ) and provision it in the cloud Pro tip: Try \"amplify add api\" to create a backend API and then \"amplify publish\" to deploy everything \u00bb Run amplify status There's nothing much to do just yet. Let's check everything still works with yarn start . It still works with any luck. (You can run this command after every step to make sure you're following along.) Add an Amplify managed API \u00b6 amplify add api You'll be asked a few more things. Warning TBD: so what are they? When you're asked \"Do you want to edit the schema now?\" say yes and replace the contents with type Vehicle @model { id: ID! make: String! model: String! mileage: Int } Deploy the back-end resources to the cloud \u00b6 Note The amplify add ... commands generally capture and save configuration. Some other commands set things up from this configuration. amplify push generates code from the GraphQL schema, for example. amplify push Enter Y for all the prompts. All this definitely doesn't do anything interesting yet: We're just setting up all the moving parts. Verify the UI still works, yarn start . The upshot \u00b6 TBD: what we did","title":"Add AWS Amplify"},{"location":"amplify/#lets-install-aws-amplify-in-your-project","text":"Inside your React Material project folder, execute amplify init OK. So this is a lot of stuff all of a sudden. Don't panic. Just mostly accept the defaults and add c-19-autobody as the projects name and dev as the environment. Here's what it looks like in my terminal Warning TBD: just create a table of the questions/responses \u00bb amplify init Note: It is recommended to run this command from the root of your app directory ? Enter a name for the project c-19-autobody ? Enter a name for the environment dev ? Choose your default editor: Visual Studio Code ? Choose the type of app that you 're building javascript Please tell us about your project ? What javascript framework are you using react ? Source Directory Path: src ? Distribution Directory Path: build ? Build Command: npm run-script build ? Start Command: npm run-script start Using default provider awscloudformation For more information on AWS Profiles, see: https://docs.aws.amazon.com/cli/latest/userguide/cli-multiple-profiles.html ? Do you want to use an AWS profile? Yes ? Please choose the profile you want to use default Adding backend environment dev to AWS Amplify Console app: d15ddnbwqjrf7u \u2827 Initializing project in the cloud... ... \u2714 Successfully created initial AWS cloud resources for deployments. \u2714 Initialized provider successfully. Initialized your environment successfully. Your project has been successfully initialized and connected to the cloud! Some next steps: \"amplify status\" will show you what you' ve added already and if it ' s locally configured or deployed \"amplify add <category>\" will allow you to add features like user login or a backend API \"amplify push\" will build all your local backend resources and provision it in the cloud \u201camplify console\u201d to open the Amplify Console and view your project status \"amplify publish\" will build all your local backend and frontend resources ( if you have hosting category added ) and provision it in the cloud Pro tip: Try \"amplify add api\" to create a backend API and then \"amplify publish\" to deploy everything \u00bb Run amplify status There's nothing much to do just yet. Let's check everything still works with yarn start . It still works with any luck. (You can run this command after every step to make sure you're following along.)","title":"Let's install AWS Amplify in your project"},{"location":"amplify/#add-an-amplify-managed-api","text":"amplify add api You'll be asked a few more things. Warning TBD: so what are they? When you're asked \"Do you want to edit the schema now?\" say yes and replace the contents with type Vehicle @model { id: ID! make: String! model: String! mileage: Int }","title":"Add an Amplify managed API"},{"location":"amplify/#deploy-the-back-end-resources-to-the-cloud","text":"Note The amplify add ... commands generally capture and save configuration. Some other commands set things up from this configuration. amplify push generates code from the GraphQL schema, for example. amplify push Enter Y for all the prompts. All this definitely doesn't do anything interesting yet: We're just setting up all the moving parts. Verify the UI still works, yarn start .","title":"Deploy the back-end resources to the cloud"},{"location":"amplify/#the-upshot","text":"TBD: what we did","title":"The upshot"},{"location":"connecttobackend/","text":"If you're sharp-eyed, you notice Amplify created configuration in aws-exports.js , which contains something like. // WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten. const awsmobile = { \"aws_project_region\" : \"us-east-1\" , \"aws_appsync_graphqlEndpoint\" : \"https://xxx.appsync-api.us-east-1.amazonaws.com/graphql\" , \"aws_appsync_region\" : \"us-east-1\" , \"aws_appsync_authenticationType\" : \"API_KEY\" , \"aws_appsync_apiKey\" : \"xxx\" }; export default awsmobile ; Let Amplify maintain this file just like it says. Configure Amplify \u00b6 We need to import and initialize Amplify with this. We only need to do it once, so let's put it in index.tsx . Note This goes in index.tsx . import Amplify from '@aws-amplify/core' ; import amplify_configuration from './aws-exports' ; Amplify . configure ( amplify_configuration ); Generate model definitions from GraphQL schema \u00b6 amplify codegen models creates a new folder models with interface definitions for everything defined in schema.graphql . We lied about DTOs.ts being useful. You can delete that file now because we're getting the data classes from our generated code instead. Now import the Vehicle interface from the generated model. Note This is in Vehicles.tsx . import { Vehicle } from './models' ; Warning TBD: Did we add the ID field yet? We have to create a new Vehicle instance in a slightly different way. This is because the model now has as ID field. DataStore runtime creates that. Generated models have a constructor that does not require it. const vehicle = new Vehicle ({ make , model , mileage }); Try it. Behaves as before, right? Use the DataStore API in Vehicles.tsx \u00b6 The DataStore API is an alternative to using the raw GraphQL API, which can get a bit fiddly to get right at first. Note We're going to keep the state as-is for now. You'll see that the way we use it is inefficient because we're fetching all vehicles every time we make a change. The basic table provided by React Material does not provide pagination with lazy loading. We'll get to a solution for this in a bit. But it's a bit complicated and might throw us off the scent if we do that now. If you're curious, we'll show you how to use Material Table, https://material-table.com Import it. import { DataStore } from '@aws-amplify/datastore' ; We're going to subscribe to changes and reload all the vehicles every time we get an event. We're not going to use setVehicles() in the button handlers themselves. Instead we call the DataStore API and let the subscription handler be the only place that calls setVehicles() Subscription is a great candidate for another React hook, withEffect() . Read that as \"with side-effect\". You can find out more here: https://reactjs.org/docs/hooks-effect.html .","title":"Connect to the back-end"},{"location":"connecttobackend/#configure-amplify","text":"We need to import and initialize Amplify with this. We only need to do it once, so let's put it in index.tsx . Note This goes in index.tsx . import Amplify from '@aws-amplify/core' ; import amplify_configuration from './aws-exports' ; Amplify . configure ( amplify_configuration );","title":"Configure Amplify"},{"location":"connecttobackend/#generate-model-definitions-from-graphql-schema","text":"amplify codegen models creates a new folder models with interface definitions for everything defined in schema.graphql . We lied about DTOs.ts being useful. You can delete that file now because we're getting the data classes from our generated code instead. Now import the Vehicle interface from the generated model. Note This is in Vehicles.tsx . import { Vehicle } from './models' ; Warning TBD: Did we add the ID field yet? We have to create a new Vehicle instance in a slightly different way. This is because the model now has as ID field. DataStore runtime creates that. Generated models have a constructor that does not require it. const vehicle = new Vehicle ({ make , model , mileage }); Try it. Behaves as before, right?","title":"Generate model definitions from GraphQL schema"},{"location":"connecttobackend/#use-the-datastore-api-in-vehiclestsx","text":"The DataStore API is an alternative to using the raw GraphQL API, which can get a bit fiddly to get right at first. Note We're going to keep the state as-is for now. You'll see that the way we use it is inefficient because we're fetching all vehicles every time we make a change. The basic table provided by React Material does not provide pagination with lazy loading. We'll get to a solution for this in a bit. But it's a bit complicated and might throw us off the scent if we do that now. If you're curious, we'll show you how to use Material Table, https://material-table.com Import it. import { DataStore } from '@aws-amplify/datastore' ; We're going to subscribe to changes and reload all the vehicles every time we get an event. We're not going to use setVehicles() in the button handlers themselves. Instead we call the DataStore API and let the subscription handler be the only place that calls setVehicles() Subscription is a great candidate for another React hook, withEffect() . Read that as \"with side-effect\". You can find out more here: https://reactjs.org/docs/hooks-effect.html .","title":"Use the DataStore API in Vehicles.tsx"},{"location":"createproject/","text":"yarn create react-app my-app --template typescript yarn start The upshot \u00b6 ... TBD","title":"Create the project"},{"location":"createproject/#the-upshot","text":"... TBD","title":"The upshot"},{"location":"license/","text":"MIT License Copyright \u00a9 2020 Stephen Harrison Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"material/","text":"Get React Material UI \u00b6 yarn add @material-ui/core A trivial page with a toolbar \u00b6 Replace App.tsx with this import React from 'react'; import { AppBar, Toolbar, Typography } from '@material-ui/core'; function App() { return ( <AppBar color=\"inherit\"> <Toolbar> <Typography variant=\"h4\" >Welcome to C-19 Autobody</Typography> </Toolbar> </AppBar> ); } export default App; Do you like dark theme? \u00b6 If you like your Material theme dark, change your index.tsx to import React from 'react'; import ReactDOM from 'react-dom'; import './index.css'; import App from './App'; import * as serviceWorker from './serviceWorker'; import { createMuiTheme, ThemeProvider, CssBaseline } from '@material-ui/core'; const theme = createMuiTheme({ palette: { type: 'dark', }, }); ReactDOM.render( <React.StrictMode> <ThemeProvider theme={theme}> <CssBaseline /> <App /> </ThemeProvider> </React.StrictMode>, document.getElementById('root') ); // If you want your app to work offline and load faster, you can change // unregister() to register() below. Note this comes with some pitfalls. // Learn more about service workers: https://bit.ly/CRA-PWA serviceWorker.unregister(); The upshot \u00b6 ... TBD","title":"Add React Material"},{"location":"material/#get-react-material-ui","text":"yarn add @material-ui/core","title":"Get React Material UI"},{"location":"material/#a-trivial-page-with-a-toolbar","text":"Replace App.tsx with this import React from 'react'; import { AppBar, Toolbar, Typography } from '@material-ui/core'; function App() { return ( <AppBar color=\"inherit\"> <Toolbar> <Typography variant=\"h4\" >Welcome to C-19 Autobody</Typography> </Toolbar> </AppBar> ); } export default App;","title":"A trivial page with a toolbar"},{"location":"material/#do-you-like-dark-theme","text":"If you like your Material theme dark, change your index.tsx to import React from 'react'; import ReactDOM from 'react-dom'; import './index.css'; import App from './App'; import * as serviceWorker from './serviceWorker'; import { createMuiTheme, ThemeProvider, CssBaseline } from '@material-ui/core'; const theme = createMuiTheme({ palette: { type: 'dark', }, }); ReactDOM.render( <React.StrictMode> <ThemeProvider theme={theme}> <CssBaseline /> <App /> </ThemeProvider> </React.StrictMode>, document.getElementById('root') ); // If you want your app to work offline and load faster, you can change // unregister() to register() below. Note this comes with some pitfalls. // Learn more about service workers: https://bit.ly/CRA-PWA serviceWorker.unregister();","title":"Do you like dark theme?"},{"location":"material/#the-upshot","text":"... TBD","title":"The upshot"},{"location":"navigation/","text":"Note If you get turned around with the sequence of updates we're going to make with files, or if you'd rather the TL;DR, click \"The upshot\" on the right to see what's what. Well, first we need to be able to get to pages for all the things you'll be dealing with in an autobody shop: vehicles , owners , services , parts , and work orders . Let's set up a row of buttons for that. They won't be plugged in yet. We'll get to that shortly. Replace App.tsx with import React from 'react' ; import { AppBar , Toolbar , Typography , Button } from '@material-ui/core' ; function App() { return ( <> < AppBar color = \"inherit\" > < Toolbar > < Typography variant = \"h4\" > Welcome to C - 19 Autobody < /Typography> < /Toolbar> < div > < Button > Home < /Button> < Button > Vehicles < /Button> < Button > Owners < /Button> < Button > Services < /Button> < Button > Parts < /Button> < Button > Work Orders < /Button> < /div> < /AppBar> < /> ); } export default App ; Try it. Getting better. We can argue about spacing later. The out-of-the-box spacing is at least not completely wrong. Create stubs for all the components \u00b6 For the Home component, simply add the file Home.tsx in the src directory with the content below. We're going to add routing to these in bit. import React from 'react' ; import { Typography } from '@material-ui/core' ; function Home() { return ( < Typography variant = \"h3\" > Home < /Typography> ); } export default Home ; Do the same for Vehicles , Owners , Services , Parts , and WorkOrders . Note Remember there are 3 places you need to change the name of each component. Add routes to those stubs \u00b6 First add the react-router-dom dependency and TypeScript definitions. yarn add react-router-dom @types/react-router-dom Now wrap the App component in a <BrowserRouter> ... </BrowserRouter> . The easiest place to do this is in index.tsx . Note Make these changes in index.tsx Add the import import { BrowserRouter } from \"react-router-dom\" ; And then wrap the existing <App /> like this ReactDOM . render ( < React . StrictMode > < ThemeProvider theme = { theme } > < CssBaseline /> < BrowserRouter > < App /> < /BrowserRouter> < /ThemeProvider> < /React.StrictMode>, document . getElementById ( 'root' ) ); Add some actual routing \u00b6 It's actually pretty easy now we have the stub components and the <BrowserRouter> wrapper. Note Make these changes in App.tsx Replace the <Button> s in the <AppBar> with <Link> s and the bindings from routes to the components. We'll need a few more imports. See the complete App.tsx in the upshot below. Try it with yarn start . Wait what? Why can't I see the stubs the text of the stubs? Here's a clue: Change one of the subs to be taller. Like function Home() { return ( <> < Typography variant = \"h3\" > Home < /Typography> < Typography variant = \"h3\" > Home < /Typography> < Typography variant = \"h3\" > Home < /Typography> < Typography variant = \"h3\" > Home < /Typography> < Typography variant = \"h3\" > Home < /Typography> < Typography variant = \"h3\" > Home < /Typography> < Typography variant = \"h3\" > Home < /Typography> < /> ); } We can see the bottom 5 plus a sliver headers. We're going to fix this ugliness in the next chapter. The upshot \u00b6 After all our changes, here's where we ended up. index.tsx is import React from 'react' ; import ReactDOM from 'react-dom' ; import './index.css' ; import App from './App' ; import * as serviceWorker from './serviceWorker' ; import { createMuiTheme , ThemeProvider , CssBaseline } from '@material-ui/core' ; import { BrowserRouter } from \"react-router-dom\" ; const theme = createMuiTheme ({ palette : { type : 'dark' , }, }); ReactDOM . render ( < React . StrictMode > < ThemeProvider theme = { theme } > < CssBaseline /> < BrowserRouter > < App /> < /BrowserRouter> < /ThemeProvider> < /React.StrictMode>, document . getElementById ( 'root' ) ); // If you want your app to work offline and load faster, you can change // unregister() to register() below. Note this comes with some pitfalls. // Learn more about service workers: https://bit.ly/CRA-PWA serviceWorker . unregister (); App.tsx is import React from 'react' ; import { AppBar , Toolbar , Typography , Button } from '@material-ui/core' ; import { Link , Route , Switch } from 'react-router-dom' ; import Home from './Home' ; import Vehicles from './Vehicles' ; import Owners from './Owners' ; import Services from './Services' ; import Parts from './Parts' ; import WorkOrders from './WorkOrders' ; function App() { return ( <> < AppBar color = \"inherit\" > < Toolbar > < Typography variant = \"h4\" > Welcome to C - 19 Autobody < /Typography> < /Toolbar> < div > < Link to = \"/\" component = { Button } > Home < /Link> < Link to = \"/vehicles\" component = { Button } > Vehicles < /Link> < Link to = \"/owners\" component = { Button } > Owners < /Link> < Link to = \"/services\" component = { Button } > Services < /Link> < Link to = \"/parts\" component = { Button } > Parts < /Link> < Link to = \"/workorders\" component = { Button } > Work Orders < /Link> < /div> < /AppBar> < main > < Switch > < Route path = \"/\" component = { Home } exact /> < Route path = \"/vehicles\" component = { Vehicles } /> < Route path = \"/owners\" component = { Owners } /> < Route path = \"/services\" component = { Services } /> < Route path = \"/parts\" component = { Parts } /> < Route path = \"/workorders\" component = { WorkOrders } /> < /Switch> < /main> < /> ); } export default App ; We defined components for Home , Vehicles , Owners , Services , Parts , and Work Orders in files in src called Home.tsx and so on, with the pattern import React from 'react' ; import { Typography } from '@material-ui/core' ; function Home() { return ( <> < Typography variant = \"h3\" > Home < /Typography> < /> ); } export default Home ; For Work Orders, call the file WorkOrders.tsx .","title":"Add navigation"},{"location":"navigation/#create-stubs-for-all-the-components","text":"For the Home component, simply add the file Home.tsx in the src directory with the content below. We're going to add routing to these in bit. import React from 'react' ; import { Typography } from '@material-ui/core' ; function Home() { return ( < Typography variant = \"h3\" > Home < /Typography> ); } export default Home ; Do the same for Vehicles , Owners , Services , Parts , and WorkOrders . Note Remember there are 3 places you need to change the name of each component.","title":"Create stubs for all the components"},{"location":"navigation/#add-routes-to-those-stubs","text":"First add the react-router-dom dependency and TypeScript definitions. yarn add react-router-dom @types/react-router-dom Now wrap the App component in a <BrowserRouter> ... </BrowserRouter> . The easiest place to do this is in index.tsx . Note Make these changes in index.tsx Add the import import { BrowserRouter } from \"react-router-dom\" ; And then wrap the existing <App /> like this ReactDOM . render ( < React . StrictMode > < ThemeProvider theme = { theme } > < CssBaseline /> < BrowserRouter > < App /> < /BrowserRouter> < /ThemeProvider> < /React.StrictMode>, document . getElementById ( 'root' ) );","title":"Add routes to those stubs"},{"location":"navigation/#add-some-actual-routing","text":"It's actually pretty easy now we have the stub components and the <BrowserRouter> wrapper. Note Make these changes in App.tsx Replace the <Button> s in the <AppBar> with <Link> s and the bindings from routes to the components. We'll need a few more imports. See the complete App.tsx in the upshot below. Try it with yarn start . Wait what? Why can't I see the stubs the text of the stubs? Here's a clue: Change one of the subs to be taller. Like function Home() { return ( <> < Typography variant = \"h3\" > Home < /Typography> < Typography variant = \"h3\" > Home < /Typography> < Typography variant = \"h3\" > Home < /Typography> < Typography variant = \"h3\" > Home < /Typography> < Typography variant = \"h3\" > Home < /Typography> < Typography variant = \"h3\" > Home < /Typography> < Typography variant = \"h3\" > Home < /Typography> < /> ); } We can see the bottom 5 plus a sliver headers. We're going to fix this ugliness in the next chapter.","title":"Add some actual routing"},{"location":"navigation/#the-upshot","text":"After all our changes, here's where we ended up. index.tsx is import React from 'react' ; import ReactDOM from 'react-dom' ; import './index.css' ; import App from './App' ; import * as serviceWorker from './serviceWorker' ; import { createMuiTheme , ThemeProvider , CssBaseline } from '@material-ui/core' ; import { BrowserRouter } from \"react-router-dom\" ; const theme = createMuiTheme ({ palette : { type : 'dark' , }, }); ReactDOM . render ( < React . StrictMode > < ThemeProvider theme = { theme } > < CssBaseline /> < BrowserRouter > < App /> < /BrowserRouter> < /ThemeProvider> < /React.StrictMode>, document . getElementById ( 'root' ) ); // If you want your app to work offline and load faster, you can change // unregister() to register() below. Note this comes with some pitfalls. // Learn more about service workers: https://bit.ly/CRA-PWA serviceWorker . unregister (); App.tsx is import React from 'react' ; import { AppBar , Toolbar , Typography , Button } from '@material-ui/core' ; import { Link , Route , Switch } from 'react-router-dom' ; import Home from './Home' ; import Vehicles from './Vehicles' ; import Owners from './Owners' ; import Services from './Services' ; import Parts from './Parts' ; import WorkOrders from './WorkOrders' ; function App() { return ( <> < AppBar color = \"inherit\" > < Toolbar > < Typography variant = \"h4\" > Welcome to C - 19 Autobody < /Typography> < /Toolbar> < div > < Link to = \"/\" component = { Button } > Home < /Link> < Link to = \"/vehicles\" component = { Button } > Vehicles < /Link> < Link to = \"/owners\" component = { Button } > Owners < /Link> < Link to = \"/services\" component = { Button } > Services < /Link> < Link to = \"/parts\" component = { Button } > Parts < /Link> < Link to = \"/workorders\" component = { Button } > Work Orders < /Link> < /div> < /AppBar> < main > < Switch > < Route path = \"/\" component = { Home } exact /> < Route path = \"/vehicles\" component = { Vehicles } /> < Route path = \"/owners\" component = { Owners } /> < Route path = \"/services\" component = { Services } /> < Route path = \"/parts\" component = { Parts } /> < Route path = \"/workorders\" component = { WorkOrders } /> < /Switch> < /main> < /> ); } export default App ; We defined components for Home , Vehicles , Owners , Services , Parts , and Work Orders in files in src called Home.tsx and so on, with the pattern import React from 'react' ; import { Typography } from '@material-ui/core' ; function Home() { return ( <> < Typography variant = \"h3\" > Home < /Typography> < /> ); } export default Home ; For Work Orders, call the file WorkOrders.tsx .","title":"The upshot"},{"location":"prepare-ui/","text":"We're going to add code to one of the pages\u2014vehicles\u2014to add a vehicle and list them out. We just generate random values for fields for now. And it won't be hooked up to the back end. But this will let us see how to update state and display the complete list. First add Amplify dependencies \u00b6 yarn add aws-amplify @aws-amplify/ui-react We're mnot going to use these right off the bat, but let's do it while we're thinking of it. A little layout \u00b6 Lets solve the ugly indentation of the \"Vehicles\" header. Actually, let's solve the problem for all pages at the same time. This is easy: Just add a simple style to App.tsx . Define a style before the function definition like this. Note Remember this goes in App.tsx . import { makeStyles } from '@material-ui/core' ; const useStyles = makeStyles (( theme ) => ({ root : { margin : theme.spacing ( 15 , 3 , 0 , 3 ), }, })); Remember the theme argument lets us use spacing from the theme itself. We could use hard-coded pixel sizes, but we'd have to update all those manually every time the theme changes. That would be not only annoying, but in addition your pull request would be rejected and no one on your team will want to go to lunch with you today. makeStyles() returns a function. We get the classNames from the result of calling this function like this function App() { const classes = useStyles (); ... Then we can use the styles in a top-level React element. If we replace the existing <> ... </> with a <div> , we can say the following to wrap everything in the style we defined in makeStyles(...) above. return ( < div className = { classes . root } > < AppBar color = \"inherit\" > ... We're just using the name of the class here. Test it worked. Well at least the margins are looking better. Now add some state for the list of vehicles \u00b6 First let's generate the model code from our schema.graphql . amplify codegen models Note All this goes in Vehicles.tsx Import the new Vehicle class import Vehicle from './models' ; We're going to use React hooks for our state. Put this at the top of the function const [ vehicles , setVehicles ] = React . useState < Vehicle [] > ([]) We'll be using random placeholders for fields: UUIDs are just the ticket. yarn add uuidv4 @types/uuid Waaaaaaay too far ahead. Here's the whole file, Vehicles.tsx . We'll go through it in a second. import React from 'react' ; import { Grid , Button , List , ListItem , ListItemText } from '@material-ui/core' ; import { Vehicle } from './DTOs' ; import { uuid } from 'uuidv4' ; function Vehicles() { const [ vehicles , setVehicles ] = React . useState < Vehicle [] > ([]) function addVehicle() { const make = uuid (); const model = uuid (); const mileage = Math . floor ( Math . random () * 100000 ) + 1 ; const vehicle : Vehicle = { make , model , mileage } setVehicles ([... vehicles , vehicle ]) } function onClick ( event : React.MouseEvent ) { console . log ( 'event' , event ); addVehicle (); event . preventDefault (); } return ( < Grid container spacing = { 1 } > < Grid item xs = { 12 } > < Button onClick = { onClick } > Add vehicle < /Button> < /Grid> < Grid item xs = { 12 } > < List > { vehicles . map (( vehicle ) => ( < ListItem key = { vehicle . make } > < ListItemText > { JSON . stringify ( vehicle )} < /ListItemText> < /ListItem> )) } < /List> < /Grid> < /Grid> ); } export default Vehicles ; We maintain state using React hooks. See https://reactjs.org/docs/hooks-overview.html . Hooks are so cool. const [ vehicles , setVehicles ] = React . useState < Vehicle [] > ([]) Then we need a function to add a random vehicle to the list, which calls setVehicles() . function addVehicle() { const make = uuid (); const model = uuid (); const mileage = Math . floor ( Math . random () * 100000 ) + 1 ; const vehicle : Vehicle = { make , model , mileage } setVehicles ([... vehicles , vehicle ]) } Then a simple handler for a button click. function onClick ( event : React.MouseEvent ) { console . log ( 'event' , event ); addVehicle (); event . preventDefault (); } The event.preventDefault(); is necessary because React decorates native DOM events and we don't want the browser to refresh or reload the window. There's an outer <Grid container spacing={1}> , which spaces elements inside it with one theme unit. Then there are two inner <Grid item xs={12} > elements, which span a full-width row. Layout in React Material is based on rows of 12 columns. This makes our items full-width. The first element is a <Button> that does something handy when you click it. The next item iterates over the vehicles and displays them in a <List> . Try it and see. The upshot \u00b6 We added an array of Vehicles as state, a button to add a new one with some random values for the fields for make , model , and mileage , and a list of them that updates as we add a vehicle. If you feel up to making a simple change, you can add another button to delete all saved vehicles. Or you could try converting the <List> to a <Table> . It sure would be nicer if it wasn't JSON. We took a stab at the suggested changes \u00b6 import React from 'react' ; import { Grid , Button , Table , TableHead , TableRow , TableCell , TableBody } from '@material-ui/core' ; import { Vehicle } from './DTOs' ; import { uuid } from 'uuidv4' ; function Vehicles() { const [ vehicles , setVehicles ] = React . useState < Vehicle [] > ([]) function addVehicle() { const make = uuid (); const model = uuid (); const mileage = Math . floor ( Math . random () * 100000 ) + 1 ; const vehicle : Vehicle = { make , model , mileage } setVehicles ([... vehicles , vehicle ]) } function onAdd ( event : React.MouseEvent ) { addVehicle (); event . preventDefault (); } function onDeleteAll ( event : React.MouseEvent ) { setVehicles ([]); event . preventDefault (); } return ( < Grid container spacing = { 1 } > < Grid item xs = { 12 } > < Button onClick = { onAdd } > Add vehicle < /Button> < Button onClick = { onDeleteAll } > Delete all vehicles < /Button> < /Grid> < Grid item xs = { 12 } > < Table > < TableHead > < TableRow > < TableCell > Make < /TableCell> < TableCell > Model < /TableCell> < TableCell align = \"right\" > Mileage < /TableCell> < /TableRow> < /TableHead> < TableBody > { vehicles . map (( vehicle ) => ( < TableRow > < TableCell > { vehicle . make } < /TableCell> < TableCell > { vehicle . model } < /TableCell> < TableCell > { vehicle . mileage } < /TableCell> < /TableRow> )) } < /TableBody> < /Table> < /Grid> < /Grid> ); } export default Vehicles ; The table's pretty lame: There's no pagination, editing, sorting, or filtering. That's in our future.","title":"Prepare the UI"},{"location":"prepare-ui/#first-add-amplify-dependencies","text":"yarn add aws-amplify @aws-amplify/ui-react We're mnot going to use these right off the bat, but let's do it while we're thinking of it.","title":"First add Amplify dependencies"},{"location":"prepare-ui/#a-little-layout","text":"Lets solve the ugly indentation of the \"Vehicles\" header. Actually, let's solve the problem for all pages at the same time. This is easy: Just add a simple style to App.tsx . Define a style before the function definition like this. Note Remember this goes in App.tsx . import { makeStyles } from '@material-ui/core' ; const useStyles = makeStyles (( theme ) => ({ root : { margin : theme.spacing ( 15 , 3 , 0 , 3 ), }, })); Remember the theme argument lets us use spacing from the theme itself. We could use hard-coded pixel sizes, but we'd have to update all those manually every time the theme changes. That would be not only annoying, but in addition your pull request would be rejected and no one on your team will want to go to lunch with you today. makeStyles() returns a function. We get the classNames from the result of calling this function like this function App() { const classes = useStyles (); ... Then we can use the styles in a top-level React element. If we replace the existing <> ... </> with a <div> , we can say the following to wrap everything in the style we defined in makeStyles(...) above. return ( < div className = { classes . root } > < AppBar color = \"inherit\" > ... We're just using the name of the class here. Test it worked. Well at least the margins are looking better.","title":"A little layout"},{"location":"prepare-ui/#now-add-some-state-for-the-list-of-vehicles","text":"First let's generate the model code from our schema.graphql . amplify codegen models Note All this goes in Vehicles.tsx Import the new Vehicle class import Vehicle from './models' ; We're going to use React hooks for our state. Put this at the top of the function const [ vehicles , setVehicles ] = React . useState < Vehicle [] > ([]) We'll be using random placeholders for fields: UUIDs are just the ticket. yarn add uuidv4 @types/uuid Waaaaaaay too far ahead. Here's the whole file, Vehicles.tsx . We'll go through it in a second. import React from 'react' ; import { Grid , Button , List , ListItem , ListItemText } from '@material-ui/core' ; import { Vehicle } from './DTOs' ; import { uuid } from 'uuidv4' ; function Vehicles() { const [ vehicles , setVehicles ] = React . useState < Vehicle [] > ([]) function addVehicle() { const make = uuid (); const model = uuid (); const mileage = Math . floor ( Math . random () * 100000 ) + 1 ; const vehicle : Vehicle = { make , model , mileage } setVehicles ([... vehicles , vehicle ]) } function onClick ( event : React.MouseEvent ) { console . log ( 'event' , event ); addVehicle (); event . preventDefault (); } return ( < Grid container spacing = { 1 } > < Grid item xs = { 12 } > < Button onClick = { onClick } > Add vehicle < /Button> < /Grid> < Grid item xs = { 12 } > < List > { vehicles . map (( vehicle ) => ( < ListItem key = { vehicle . make } > < ListItemText > { JSON . stringify ( vehicle )} < /ListItemText> < /ListItem> )) } < /List> < /Grid> < /Grid> ); } export default Vehicles ; We maintain state using React hooks. See https://reactjs.org/docs/hooks-overview.html . Hooks are so cool. const [ vehicles , setVehicles ] = React . useState < Vehicle [] > ([]) Then we need a function to add a random vehicle to the list, which calls setVehicles() . function addVehicle() { const make = uuid (); const model = uuid (); const mileage = Math . floor ( Math . random () * 100000 ) + 1 ; const vehicle : Vehicle = { make , model , mileage } setVehicles ([... vehicles , vehicle ]) } Then a simple handler for a button click. function onClick ( event : React.MouseEvent ) { console . log ( 'event' , event ); addVehicle (); event . preventDefault (); } The event.preventDefault(); is necessary because React decorates native DOM events and we don't want the browser to refresh or reload the window. There's an outer <Grid container spacing={1}> , which spaces elements inside it with one theme unit. Then there are two inner <Grid item xs={12} > elements, which span a full-width row. Layout in React Material is based on rows of 12 columns. This makes our items full-width. The first element is a <Button> that does something handy when you click it. The next item iterates over the vehicles and displays them in a <List> . Try it and see.","title":"Now add some state for the list of vehicles"},{"location":"prepare-ui/#the-upshot","text":"We added an array of Vehicles as state, a button to add a new one with some random values for the fields for make , model , and mileage , and a list of them that updates as we add a vehicle. If you feel up to making a simple change, you can add another button to delete all saved vehicles. Or you could try converting the <List> to a <Table> . It sure would be nicer if it wasn't JSON.","title":"The upshot"},{"location":"prepare-ui/#we-took-a-stab-at-the-suggested-changes","text":"import React from 'react' ; import { Grid , Button , Table , TableHead , TableRow , TableCell , TableBody } from '@material-ui/core' ; import { Vehicle } from './DTOs' ; import { uuid } from 'uuidv4' ; function Vehicles() { const [ vehicles , setVehicles ] = React . useState < Vehicle [] > ([]) function addVehicle() { const make = uuid (); const model = uuid (); const mileage = Math . floor ( Math . random () * 100000 ) + 1 ; const vehicle : Vehicle = { make , model , mileage } setVehicles ([... vehicles , vehicle ]) } function onAdd ( event : React.MouseEvent ) { addVehicle (); event . preventDefault (); } function onDeleteAll ( event : React.MouseEvent ) { setVehicles ([]); event . preventDefault (); } return ( < Grid container spacing = { 1 } > < Grid item xs = { 12 } > < Button onClick = { onAdd } > Add vehicle < /Button> < Button onClick = { onDeleteAll } > Delete all vehicles < /Button> < /Grid> < Grid item xs = { 12 } > < Table > < TableHead > < TableRow > < TableCell > Make < /TableCell> < TableCell > Model < /TableCell> < TableCell align = \"right\" > Mileage < /TableCell> < /TableRow> < /TableHead> < TableBody > { vehicles . map (( vehicle ) => ( < TableRow > < TableCell > { vehicle . make } < /TableCell> < TableCell > { vehicle . model } < /TableCell> < TableCell > { vehicle . mileage } < /TableCell> < /TableRow> )) } < /TableBody> < /Table> < /Grid> < /Grid> ); } export default Vehicles ; The table's pretty lame: There's no pagination, editing, sorting, or filtering. That's in our future.","title":"We took a stab at the suggested changes"},{"location":"releasenotes/","text":"TBD","title":"Release notes"},{"location":"tools/","text":"This are just the basic recipes. See the stories for all the details. yarn package manager \u00b6 See these instructions https://classic.yarnpkg.com/en/docs/install AWS account and profile \u00b6 zzz xxx The upshot \u00b6 ... TBD","title":"Install the tools"},{"location":"tools/#yarn-package-manager","text":"See these instructions https://classic.yarnpkg.com/en/docs/install","title":"yarn package manager"},{"location":"tools/#aws-account-and-profile","text":"zzz xxx","title":"AWS account and profile"},{"location":"tools/#the-upshot","text":"... TBD","title":"The upshot"}]}